'''This script will do every possible reconassiance with an ability to print the output in terminal and to store the output in a given file with 
'filename.txt' extention.
To get the results from shodan, you need an api key from shodan and replace the api key with given key in this program.'''

import whois
import dns.resolver
import argparse
import requests
import socket
import shodan
import sys

# Define the Tee class for redirecting output to multiple streams
class Tee:
    def __init__(self, *files):
        self.files = files

    def write(self, obj):
        for f in self.files:
            f.write(obj)

    def flush(self):
        for f in self.files:
            f.flush()

# Create an argument parser
arguments = argparse.ArgumentParser(description="This is a basic information gathering tool.", usage="python3 infogath.py -d DOMAIN [-s IP]")
arguments.add_argument("-d", "--domain", help="Enter the domain name for footprinting.")
arguments.add_argument("-s", "--shodan", help="Enter the IP for shodan search.")

args = arguments.parse_args()  # Parse the command-line arguments
domain = args.domain  # Get the domain name from the command-line arguments
ip = args.shodan  # Get the IP for Shodan search from the command-line arguments

# Prompt the user to decide whether to store the output or not
store_output = input("Do you want to store the output in a file? (yes/no): ")

if store_output.lower() == "yes":
    # If the user wants to store the output, prompt for the file name
    output_file = input("Enter the file name to store the output: ")

    try:
        # Open the file in append mode so that existing content is not overwritten
        with open(output_file, 'a') as f:
            # Redirect standard output to the file while preserving the original stdout
            original_stdout = sys.stdout
            sys.stdout = Tee(original_stdout, f)

            # python-whois & whois module
            print("[+] Getting whois info...")
            try:
                who = whois.query(domain)  # Query whois information for the specified domain
                # Print the retrieved whois information
                print(f"Name: {who.name}")
                print(f"Registrar: {who.registrar}")
                print(f"Name Servers: {who.name_servers}")
                print(f"Creation Date: {who.creation_date}")
                print(f"Expiration Date: {who.expiration_date}")
                print(f"Emails: {who.emails}")
            except Exception as e:
                print(f"There is an error in whois info: {e}")  # Handle any exceptions related to whois information retrieval

            # Dns module
            print("\n\n[+] Getting DNS info")
            try:
                print("\n\n'A' Records are here")
                for a_rec in dns.resolver.resolve(domain, 'A'):  # Resolve 'A' records for the domain
                    print(f"[+] A Record: {a_rec.to_text()}")  # Print the resolved 'A' records
            except Exception as e:
                print(f"There is an error in DNS 'A' Records: {e}")  # Handle any exceptions related to 'A' record resolution

            # [Similar comments for 'NS', 'MX', 'TXT' record resolution]
            try:
                print("\n\n'NS' Records are here")
                for ns_rec in dns.resolver.resolve(domain, 'NS'):
                    print(f"[+] NS Record: {ns_rec.to_text()}")
            except Exception as e:
                print(f"There is an error in DNS 'NS' Records: {e}")

            try:
                print("\n\n'MX' Records are here")
                for mx_rec in dns.resolver.resolve(domain, 'MX'):
                    print(f"[+] MX Record: {mx_rec.to_text()}")
            except Exception as e:
                print(f"There is an error in DNS 'MX' Records: {e}")

            try:
                print("\n\n'TXT' Records are here")
                for txt_rec in dns.resolver.resolve(domain, 'TXT'):
                    print(f"[+] TXT Record: {txt_rec.to_text()}")
            except Exception as e:
                print(f"There is an error in DNS 'TXT' Records: {e}")
            
            # Geolocation Module
            print("\n\n[+] Getting geolocation info")
            try:
                respone = requests.request('Get', "https://geolocation-db.com/json/" + socket.gethostbyname(domain)).json()
                # Retrieve geolocation information using an API and print the results
                print(f"[+] Country: {respone['country_name']}")
                print(f"[+] Latitude: {respone['latitude']}")
                print(f"[+] Longitude: {respone['longitude']}")
                print(f"[+] City: {respone['city']}")
                print(f"[+] State: {respone['state']}")
            except Exception as e:
                print(f"There is an error in fetching geolocation: {e}")  # Handle any exceptions related to geolocation information retrieval

            # Shodan Module
            if ip:
                print("\n\n[+] Getting ip for Shodan")
                api = shodan.Shodan("yEfgH1rg8p76Wgmivf9rpQ2iwFP0FiQ3")  # Initialize the Shodan API with the API key
                try:
                    results = api.search(ip)  # Search Shodan for the specified IP
                    print(f"[+] Results found: {results['total']}")  # Print the total results found
                    for result in results['matches']:
                        print(f"[+] IP: {result['ip_str']}")  # Print the IP addresses
                        print(f"[+] Data: \n{result['data']}\n")  # Print the data associated with the IP
                except Exception as e:
                    print(f"[-] Error in Shodan search. : {e}")  # Handle any exceptions related to Shodan search

            # Restore the original stdout
            sys.stdout = original_stdout

    except Exception as e:
        print(f"An error occurred while writing to the file: {e}")
        sys.exit(1)  # Exit the script if an error occurs while writing to the file
